name:                Frames
version:             0.1.8
synopsis:            Data frames For working with tabular data files
description:         User-friendly, type safe, runtime efficient tooling for
                     working with tabular data deserialized from
                     comma-separated values (CSV) files. The type of
                     each row of data is inferred from data, which can
                     then be streamed from disk, or worked with in
                     memory.
license:             BSD3
license-file:        LICENSE
author:              Anthony Cowley
maintainer:          acowley@gmail.com
copyright:           Copyright (C) 2014-2015 Anthony Cowley
category:            Data
build-type:          Simple
extra-source-files:  benchmarks/*.hs benchmarks/*.py
                     demo/Main.hs CHANGELOG.md
                     data/GetData.hs
cabal-version:       >=1.10
tested-with:         GHC == 7.10.3, GHC == 8.0.1

source-repository head
  type:     git
  location: http://github.com/acowley/Frames.git

flag demos
  description: Build demonstration programs
  default:     False
  manual:      True

library
  exposed-modules:     Frames
                       Frames.Col
                       Frames.ColumnTypeable
                       Frames.ColumnUniverse
                       Frames.CoRec
                       Frames.CSV
                       Frames.Exploration
                       Frames.Frame
                       Frames.InCore
                       Frames.Melt
                       Frames.Rec
                       Frames.RecF
                       Frames.RecLens
                       Frames.TypeLevel
  other-extensions:    DataKinds, GADTs, KindSignatures, TypeFamilies,
                       TypeOperators, ConstraintKinds, StandaloneDeriving,
                       UndecidableInstances, ScopedTypeVariables,
                       OverloadedStrings
  build-depends:       base >=4.8 && <4.10,
                       bytestring >= 0.10.6.0,
                       ghc-prim >=0.3 && <0.6,
                       pipes >= 4.1 && < 5,
                       primitive >= 0.6 && < 0.7,
                       readable >= 0.3.1,
                       template-haskell,
                       text >= 1.1.1.0,
                       time >= 1.5.0.1,
                       transformers,
                       tz,
                       tzdata,
                       vector,
                       vinyl >= 0.5 && < 0.6
  hs-source-dirs:      src
  default-language:    Haskell2010
  ghc-options:         -Wall

-- Get the large-ish data files used in the demo and benchmark
executable getdata
  if !flag(demos)
    buildable: False
  main-is: GetData.hs
  if flag(demos)
    build-depends: base, bytestring, http-client >= 0.4.3, zip-archive, directory
  hs-source-dirs: data
  default-language: Haskell2010
  ghc-options: -Wall

-- Demonstrate using the Chart library to produce figures
executable plot
  if !flag(demos)
    buildable: False
  main-is: Plot.hs
  if flag(demos)
    build-depends: base, Frames,
                   microlens, vector, text,
                   template-haskell,
                   pipes >= 4.1.5 && < 4.3,
                   Chart >= 1.5 && < 1.8,
                   Chart-diagrams >= 1.5 && < 1.8,
                   diagrams-rasterific >= 1.3 && < 1.4,
                   diagrams-lib >= 1.3 && < 1.4,
                   readable, containers, statistics
  hs-source-dirs: demo
  default-language: Haskell2010

executable plot2
  if !flag(demos)
    buildable: False
  main-is: Plot2.hs
  if flag(demos)
    build-depends: base, Frames,
                   microlens, vector, text, template-haskell,
                   pipes >= 4.1.5 && < 4.3,
                   Chart >= 1.5 && < 1.8,
                   Chart-diagrams >= 1.5 && < 1.8,
                   diagrams-rasterific >= 1.3 && < 1.4,
                   diagrams-lib >= 1.3 && < 1.4,
                   readable, containers, statistics
  hs-source-dirs: demo
  default-language: Haskell2010

-- Miscellaneous tooling around a data file
executable demo
  if !flag(demos)
    buildable: False
  main-is: Main.hs
  if flag(demos)
    build-depends: base, list-t, microlens, transformers, Frames,
                   vector, text, template-haskell, ghc-prim, readable,
                   pipes >= 4.1.5 && < 4.3
  hs-source-dirs: demo
  default-language: Haskell2010
  ghc-options: -O2
  -- ghc-options: -O2 -fllvm

executable tutorial
  if !flag(demos)
    buildable: False
  main-is: TutorialMain.hs
  if flag(demos)
    build-depends: base, Frames,
                   microlens, vector, text, template-haskell, readable,
                   foldl >= 1.1.0 && < 1.3,
                   pipes >= 4.1.5 && < 4.3
  hs-source-dirs: demo
  default-language: Haskell2010

-- A short demo to compare with Pandas
executable benchdemo
  if !flag(demos)
    buildable: False
  main-is:          BenchDemo.hs
  if flag(demos)
    build-depends:    base, Frames,
                      foldl >= 1.1.0 && < 1.3,
                      pipes >= 4.1.5 && < 4.3
  hs-source-dirs:   benchmarks
  default-language: Haskell2010
  -- ghc-options:      -O2

  -- Use opt and llc found on PATH rather than the GHC settings file
  ghc-options:      -O2 -pgmlo opt -pgmlc llc -fllvm

-- A demonstration of dealing with missing data. Provided for source
-- code and experimentation rather than a useful executable.
executable missing
  if !flag(demos)
    buildable: False
  main-is: MissingData.hs
  if flag(demos)
    build-depends: base, Frames, vinyl
  hs-source-dirs: demo
  default-language: Haskell2010

-- Benchmark showing tradeoffs of differing processing needs
benchmark insurance
  type:             exitcode-stdio-1.0
  hs-source-dirs:   benchmarks
  main-is:          InsuranceBench.hs
  build-depends:    base, criterion, Frames, transformers,
                    pipes >= 4.1.5 && < 4.3
  ghc-options:      -O2
  default-language: Haskell2010

-- Demonstration of tab-separated value parsing
executable kata04
  if !flag(demos)
    buildable: False
  main-is: Kata04.hs
  if flag(demos)
    build-depends: base, Frames, vinyl, text, readable
  hs-source-dirs: demo
  default-language: Haskell2010
